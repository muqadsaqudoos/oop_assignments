import math
class Shape:
    def __init__(self,id,background,type,location):
        self.id = id
        self.background = background
        self.type = type
        self.location = location
        self.outline = None

    @property
    def id(self):
        return self.__id
    @id.setter
    def id(self,i):
        self.__id = i

    @property 
    def background(self):
        return self.__background
    @background.setter
    def background(self,b):
        self.__background = b

    @property
    def type(self):
        return self.__type
    @type.setter
    def type(self,t):
        self.__type = t

    @property
    def location(self):
        return self.__location
    @location.setter
    def location(self,l):
        self.__location = l

    def set_outline(self,width,color):
        a = Outline(width,color)
        return a
 
    def __str__(self):
        a = ""
        a += f"ID: {str(self.id)}, "
        a += f"Background: {str(self.background)}, "
        a += f"Type: {str(self.type)}, "
        a += f"Location: {str(self.location)} "
        a += "" if self.outline is None else self.outline.__str__()
        return a
    
class Outline:
    def __init__(self,color,width):
        self.width = width
        self.color = color

    @property
    def width(self):
        return self.__width
    @width.setter
    def width(self,w):
        self.__width = w

    @property
    def color(self):
        return self.__color
    @color.setter
    def color(self,c):
        self.__color = c

    def __str__(self):
        b = "Outline( "
        b += f"{str(self.color)},  "
        b += f"{str(self.width)}) "
        return b
    
class Circle(Shape):
    def __init__(self,id,background,type,location,radius):
        super().__init__(id,background,type,location)
        self.radius = radius

    @property
    def radius(self):
        return self.__radius
    @radius.setter
    def radius(self,r):
        self.__radius = r

    def area(self):
        return f"  Area: {(math.pi*self.radius**2)}"
    
    def circumference(self):
        return (2*math.pi*self.radius)
    
    def __str__(self):
        return f"{super().__str__()}, Radius: {self.radius}"
    
class Point(Circle):
    def __init__(self, id, background, type, location):
        super().__init__(id, background, type, location, radius=0)

    def __str__(self):
        return f"{super().__str__()}"
    
class Rectangle(Shape):
    def __init__(self,id,background,type,location,length,width):
        super().__init__(id,background,type,location)
        self.length = length
        self.width = width

    @property
    def length(self):
        return self.__lenght
    @length.setter
    def length(self,l):
        self.__lenght = l

    @property
    def width(self):
        return self.__width
    @width.setter
    def width(self,w):
        self.__width = w

    def area(self):
        return f" Area: {self.length*self.width}"
    
    def __str__(self):
        return f"{super().__str__()}, Length: {self.length}, Width: {self.width}"
    
class Square(Shape):
    def __init__(self, id, background, type, location,length):
        super().__init__(id, background, type, location)
        self.length = length

    @property
    def length(self):
        return self.__lenght
    @length.setter
    def length(self,l):
        self.__lenght = l
    
    def area(self):
        return f" Area:  {(self.length**2)}"
    
    def __str__(self):
        return f"{super().__str__()}, Length: {self.length}"    
    
class Triangle(Shape):
    def __init__(self, id, background, type, location , base, height):
        super().__init__(id, background, type, location)
        self.base = base
        self.height = height

    @property
    def base(self):
        return self.__base
    @base.setter
    def base(self,b):
        self.__base = b

    @property
    def height(self):
        return self.__height
    @height.setter
    def height(self,h):
        self.__height = h

    def area(self):
        return f" Area: {((1/2)*self.base*self.height)}"
    
    def __str__(self):
        return f"{super().__str__()}, Base: {self.base}, Height: {self.height}"
    
class Canvas:
    def __init__(self):
        self.Shape = []

    def add(self,shape):
        self.Shape.append(shape)

    def __str__(self):
        c = ""
        for shape in self.Shape:
            c += f"{str(shape)} {str(shape.area())}\n"
        return c

def main():
   
   canvas = Canvas()
   shape1 = Circle(1,"blue","C","(2,3)",5)
   shape1.set_outline("Red",3)
   canvas.add(shape1)
   shape2 = Rectangle(2,"black","R","(4,5)",5,6)
   canvas.add(shape2)
   shape3 = Square(3,"brown","S","(5,2)",5)
   shape3.set_outline("Yellow",2)
   canvas.add(shape3)
   shape4 = Triangle(4,"red","T","(2,4)",3,5)
   canvas.add(shape4)
   shape5 = Point(5,"White","P","(1,1)")
   canvas.add(shape5)
   print(canvas)

main()